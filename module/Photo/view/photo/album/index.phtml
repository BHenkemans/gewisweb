<?php
// set title
use Decision\Model\AssociationYear;
use Photo\Model\MemberAlbum;

$this->headTitle($album->getName());
$currentAlbum = $album;
while (!is_null($currentAlbum->getParent())) {
    $this->headTitle($currentAlbum->getParent()->getName());
    $currentAlbum = $currentAlbum->getParent();
}
$this->headTitle($this->translate('Photos'));
?>
<?php $this->headScript()
    ->appendFile($this->basePath() . '/js/autocomplete.min.js')
    ->appendFile($this->basePath() . '/js/photo.js')
    ->appendFile($this->basePath() . '/js/masonry.pkgd.min.js')
    ->appendFile($this->basePath() . '/js/lazyload.min.js')
    ->appendFile($this->basePath() . '/js/bootstrap/tooltip.js');
$this->headLink()->appendStylesheet($this->basePath() . '/css/photoswipe.css');

$this->scriptUrl()->requireUrl('member/search')
    ->requireUrl('member/view', ['lidnr'])
    ->requireUrl('photo/photo/tag/add', ['photo_id', 'lidnr'])
    ->requireUrl('photo/photo/tag/remove', ['photo_id', 'lidnr']);
?>
<section class="section section-breadcrumb">
    <div class="container">
        <ol class="breadcrumb">
            <li>
                <a href="<?= $this->url('photo') ?>">
                    <?= $this->translate('Photos') ?>
                </a>
            </li>
            <?php if (!$currentAlbum instanceof MemberAlbum): ?>
                <li>
                    <?php
                    // determine association year
                    $associationYear = AssociationYear::fromDate($album->getStartDateTime());
                    ?>
                    <a href="<?= $this->url('photo/year', ['year' => $associationYear->getYear()]); ?>">
                        <?= $associationYear->getYearString() ?>
                    </a>
                </li>
            <?php endif; ?>
            <?php
            // first we need to get all parents
            $crumbs = [];
            if (!is_null($album->getParent())) {
                $currentAlbum = $album;
                while (!is_null($currentAlbum->getParent())) {
                    // prepend parent to array
                    array_unshift($crumbs, [
                        'url' => $this->url(
                            'photo/album',
                            [
                                'album_id' => $currentAlbum->getParent()->getId(),
                                'album_type' => 'album',
                            ],
                        ),
                        'name' => $currentAlbum->getParent()->getName(),
                    ]);
                    $currentAlbum = $currentAlbum->getParent();
                }
            }
            // then we print them
            foreach ($crumbs as $crumb): ?>
                <li>
                    <a href="<?= $crumb['url'] ?>">
                        <?= $this->escapeHtml($crumb['name']) ?>
                    </a>
                </li>
            <?php endforeach; ?>
            <li class="active">
                <?php if ($album instanceof MemberAlbum): ?>
                    <span class="fas fa-user"></span>
                    &nbsp;
                <?php endif; ?>
                <?= $this->escapeHtml($album->getName()); ?>
            </li>
        </ol>
    </div>
</section>

<section class="section">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">
                    <?= $this->escapeHtml($album->getName()); ?>
                    <small>
                        <?php if ($album instanceof MemberAlbum): ?>
                            <a href="<?= $this->url('member/view', ['lidnr' => $album->getMember()->getLidnr()]) ?>">
                                <?= strtolower($this->translate("View user profile")) ?>
                            </a>
                        <?php else: ?>
                            <?= $album->getStartDateTime()->format('d-m-Y') ?>
                        <?php endif; ?>
                    </small>
                </h1>
            </div>
        </div>
        <?php if ($album->getAlbumCount() > 0): ?>
            <div class="row">
                <?php foreach ($album->getChildren() as $item): ?>
                    <div class="col-lg-2 col-md-3 col-xs-6 thumb">
                        <a class="thumbnail" href="<?= $this->url(
                            'photo/album',
                            [
                                'album_id' => $item->getId(),
                                'album_type' => 'album',
                            ],
                        ) ?>">
                            <img src="<?= $this->fileUrl($item->getCoverPath()); ?>">
                            <div class="caption">
                                <?= $this->escapeHtml($item->getName()); ?>
                            </div>
                        </a>
                    </div>
                <?php endforeach ?>
            </div>
        <?php endif; ?>
        <div class="pswp-gallery" data-recent-vote="<?= $hasRecentVote ? 'true' : 'false' ?>">
            <div class="grid-sizer"></div>
            <div class="gutter-sizer"></div>
            <?php $lidnr = $this->identity()->getLidnr(); ?>
            <?php foreach ($album->getPhotos() as $item): ?>
                <?php
                $ar = $item->getAspectRatio();
                $width = $config['small_thumb_size']['width'];
                $thumbnailSize = [
                    'w' => $width,
                    'h' => round($width * $ar)
                ];

                $width = $config['large_thumb_size']['width'];
                $largeSize = [
                    'w' => $width,
                    'h' => round($width * $ar)
                ];
                ?>
                <figure
                    class="pswp-gallery__item<?= is_null($item->getWeeklyPhoto()) ? '' : ' potw-thumb' ?>"
                    data-id="<?= $item->getId() ?>"
                    data-author="GEWIS"
                    data-raw-url="<?= $this->url('photo/photo_download', ['photo_id' => $item->getId()]) ?>"
                    <?php if ($album instanceof MemberAlbum): ?>
                        data-original-album="<?= $this->url('photo/album', ['album_id' => $item->getAlbum()->getId(), 'album_type' => 'album']) ?>"
                    <?php endif; ?>
                    data-profile-photo-url="<?= $this->url('photo/set_profile_photo', ['photo_id' => $item->getId()]) ?>"
                    data-tags-url="<?= $this->url('api_photo/tags', ['photo_id' => $item->getId()]) ?>"
                    data-vote-url="<?= $this->url('photo/photo/vote', ['photo_id' => $item->getId()]) ?>"
                    data-voted-url="<?= $this->url('api_photo/voted', ['photo_id' => $item->getId()]) ?>"
                >
                    <a href="<?= $this->glideUrl()->getUrl($item->getPath(), $largeSize) ?>"
                       target="_blank"
                       data-pswp-height="<?= $largeSize['h'] ?>"
                       data-pswp-width="<?= $largeSize['w'] ?>"
                    >
                        <img
                            class="lazy-load"
                            data-height="<?= $thumbnailSize['h'] ?>"
                            data-width="<?= $thumbnailSize['w'] ?>"
                            data-src="<?= $this->glideUrl()->getUrl($item->getPath(), $thumbnailSize) ?>"
                            alt=""
                        >
                    </a>
                    <figcaption class="hidden">
                        <?= $this->partial('partial/metadata.phtml', ['photo' => $item]) ?>
                    </figcaption>
                    <figtags class="hidden"></figtags>
                </figure>
            <?php endforeach; ?>
        </div>
    </div>
</section>
<script>
    $(document).ready(function () {
        Photo.initGrid();
    });
</script>
<script type="module">
    import PhotoSwipeLightbox from '<?= $this->basePath() ?>/js/photoswipe-lightbox.esm.min.js';

    const leftArrowSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 50 30" width="50" height="30"><use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#chevron-left"></use></svg>';
    const closeSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 32 32" width="32" height="32"><use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#xmark"></use></svg>';
    const zoomSVGString = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 32 32" width="32" height="32"><use class="pswp__icn-zoom-plus" href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#magnifying-glass-plus"></use><use class="pswp__icn-zoom-minus" href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#magnifying-glass-minus"></use></svg>';

    let lastActiveElement = null;

    const lightbox = new PhotoSwipeLightbox({
        gallery: '.pswp-gallery',
        children: '.pswp-gallery__item',
        bgOpacity: 0.9,

        // Use FontAwesome for all icons.
        arrowPrevSVG: leftArrowSVGString,
        arrowNextSVG: leftArrowSVGString,
        closeSVG: closeSVGString,
        zoomSVG: zoomSVGString,

        // Update translations.
        closeTitle: '<?= $this->translate('Close') ?>',
        zoomTitle: '<?= $this->translate('Zoom (z)') ?>',
        arrowPrevTitle: '<?=  $this->translate('Previous') ?>',
        arrowNextTitle: '<?=  $this->translate('Next') ?>',
        errorMsg: '<?= $this->translate('The image could not be loaded.') ?>',

        pswpModule: () => import('<?= $this->basePath() ?>/js/photoswipe.esm.min.js'),
    });

    lightbox.on('uiRegister', () => {
        // Register custom buttons.
        lightbox.pswp.ui.registerElement({
            name: 'download-button',
            appendTo: 'bar',
            order: 13,
            isButton: true,
            title: '<?= $this->translate('Download') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#download"></use>',
            },
            position: 'bar',
            onClick: (event, el, pswp) => {
                let downloadUrl = pswp.currSlide.data.element.dataset.rawUrl;
                let link = document.createElement('a');

                link.href = downloadUrl;
                link.download = '';
                document.body.appendChild(link);

                link.click();
                link.remove();
            },
        });

        lightbox.pswp.ui.registerElement({
            name: 'share-button',
            appendTo: 'bar',
            order: 12,
            isButton: true,
            title: '<?= $this->translate('Share') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#share"></use>',
            },
            onClick: (event, el, pswp) => {
                let id = pswp.currSlide.data.element.dataset.id;
                let currentURL = window.location.origin + window.location.pathname;
                let photoURL = currentURL + '#pid=' + id;

                navigator.clipboard.writeText(photoURL).then(() => {
                    el.dataset.originalTitle = '<?= $this->translate('Copied URL!') ?>';
                });
            },
        });

        <?php if ($album instanceof MemberAlbum): ?>
            lightbox.pswp.ui.registerElement({
                name: 'original-album-button',
                appendTo: 'bar',
                order: 11,
                isButton: true,
                title: '<?= $this->translate('Go to album') ?>',
                html: {
                    isCustomSVG: true,
                    inner: '<use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#images"></use>',
                },
                onClick: (event, el, pswp) => {
                    let id = pswp.currSlide.data.element.dataset.id;
                    let originalAlbum = pswp.currSlide.data.element.dataset.originalAlbum;
                    let photoURL = originalAlbum + '#&pid=' + id;

                    window.open(photoURL, '_blank').focus();
                },
            });
        <?php endif; ?>

        lightbox.pswp.ui.registerElement({
            name: 'metadata-button',
            appendTo: 'bar',
            order: 9,
            isButton: true,
            title: '<?= $this->translate('Information') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#circle-info"></use>',
            },
            position: 'bar',
            onClick: (event, el, pswp) => {
                let metadata = document.querySelector('.pswp__metadata-ui');

                if (metadata.classList.contains('pswp__metadata-ui-open')) {
                    metadata.classList.remove('pswp__metadata-ui-open');
                } else {
                    metadata.classList.add('pswp__metadata-ui-open');
                }
            },
        });

        lightbox.pswp.ui.registerElement({
            name: 'profile-photo-button',
            appendTo: 'bar',
            order: 8,
            isButton: true,
            title: '<?= $this->translate('Set as profile picture') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#image-portrait"></use>',
            },
            position: 'bar',
            onClick: (event, el, pswp) => {
                let currentSlide = pswp.currSlide.data.element;

                fetch(currentSlide.dataset.profilePhotoUrl, { method: 'POST' })
                    .then(response => response.json())
                    .then(result => {
                        el.dataset.originalTitle = '<?= $this->translate('Set as profile picture!') ?>';
                    }).catch(error => {
                        // An error occurred somewhere along the way, perhaps we should notify the user.
                        el.dataset.originalTitle = '<?= $this->translate('Could not set as profile photo, try again') ?>';
                    });
            },
        });

        lightbox.pswp.ui.registerElement({
            name: 'like-button',
            appendTo: 'bar',
            order: 7,
            isButton: true,
            title: '<?= $this->translate('Vote for photo of the week') ?>',
            html: {
                isCustomSVG: true,
                inner: '<use href="<?= $this->basePath() ?>/sprites/fontawesome/solid.svg#thumbs-up"></use>',
            },
            position: 'bar',
            onInit: (el, pswp) => {
                pswp.on('change', async () => {
                    let hasRecentVote = document.querySelector('.pswp-gallery').dataset.recentVote;
                    let promisedVote = pswp.currSlide.data.voted;

                    // Check if we are dealing with a promise, if so, resolve it.
                    if (
                        promisedVote
                        && "function" === typeof promisedVote.then
                    ) {
                        await pswp.currSlide.data.voted.then((data) => {
                            pswp.currSlide.data.voted = data.voted;
                            pswp.currSlide.data.element.dataset.voted = data.voted;
                        }).catch(() => {
                            pswp.currSlide.data.voted = false;
                            el.dataset.originalTitle = '<?= $this->translate('Cannot load vote') ?>';
                        });
                    }

                    let hasVoted = pswp.currSlide.data.element.dataset.voted;

                    if ('false' === hasRecentVote) {
                        if (1 === el.childElementCount) {
                            const pulsingDot = document.createElement('span');
                            pulsingDot.classList.add('pulsing-dot');
                            el.appendChild(pulsingDot);
                        }
                    }

                    if ('true' === hasVoted) {
                        el.firstChild.classList.add('pswp__icn-red');
                        el.dataset.originalTitle = '<?= $this->translate('Already voted!') ?>';
                    } else {
                        el.firstChild.classList.remove('pswp__icn-red');
                        el.dataset.originalTitle = '<?= $this->translate('Vote for photo of the week') ?>';
                    }
                });
            },
            onClick: (event, el, pswp) => {
                let currentSlide = pswp.currSlide.data.element;
                let hasVoted = pswp.currSlide.data.element.dataset.voted;

                if ('false' === hasVoted) {
                    fetch(currentSlide.dataset.voteUrl, { method: 'POST' })
                        .then(response => response.json())
                        .then(result => {
                            pswp.currSlide.data.voted = true;
                            el.firstChild.classList.add('pswp__icn-red');
                            el.dataset.originalTitle = '<?= $this->translate('Voted!') ?>';

                            // Remove the pulsing dot if it is present.
                            const pulsingdot = document.querySelector('.pulsing-dot');
                            if (null !== pulsingdot) {
                                el.removeChild(pulsingdot);
                            }

                            // Also update the recent vote status.
                            document.querySelector('.pswp-gallery').dataset.recentVote = 'true';
                        }).catch(error => {
                            // An error occurred somewhere along the way, perhaps we should notify the user.
                            el.dataset.originalTitle = '<?= $this->translate('Could not vote, try again') ?>';
                        });
                }
            },
        });

        // Register the metadata UI.
        lightbox.pswp.ui.registerElement({
            name: 'metadata-ui',
            appendTo: 'root',
            order: 2,
            isButton: false,
            html: '<?= $this->translate('Cannot load metadata') ?>',
            onInit: (el, pswp) => {
                pswp.on('change', () => {
                    let currentSlide = pswp.currSlide.data.element;

                    // Copy all HTML.
                    el.innerHTML = currentSlide.querySelector('figcaption').innerHTML;
                });
            },
        });

        <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'view')): ?>
            // Register the tagging system (but only if the user is allowed to see tags).
            lightbox.pswp.ui.registerElement({
                name: 'tags-ui',
                appendTo: 'root',
                order: 1,
                isButton: false,
                html: '<?= $this->translate('Loading tags...') ?>',
                onInit: (el, pswp) => {
                    pswp.on('change', async () => {
                        let currentSlide = pswp.currSlide.data.element;
                        let promisedTags = pswp.currSlide.data.tags;

                        // Make sure that the tags say they are loading, otherwise it can occur that old data is still
                        // shown after switching to a new slide.
                        el.innerText = '<?= $this->translate('Loading tags...') ?>';

                        // Check if we are dealing with a promise, if so, resolve it.
                        if (
                            promisedTags
                            && "function" === typeof promisedTags.then
                        ) {
                            await pswp.currSlide.data.tags.then((data) => {
                                pswp.currSlide.data.tags = data;
                            }).catch(() => {
                                pswp.currSlide.data.tags = false;
                                el.innerText = '<?= $this->translate('Cannot load tags') ?>';
                            });
                        }

                        // We now either have the actual tags or a boolean in the tags data element.
                        let data = pswp.currSlide.data.tags;

                        // If we have the actual tags, we update the tags UI element of the PhotoSwipe UI to be our
                        // tags interface.
                        if (Array.isArray(data)) {
                            let id = pswp.currSlide.data.element.dataset.id;
                            let tagCount = data.length;
                            let i = 1;

                            el.innerHTML = `
                                <span class="tag-title ${(0 === tagCount) ? 'hidden' : ''}"><?= $this->translate('In this photo:') ?></span>
                                <span class="no-tag-title ${(0 !== tagCount) ? 'hidden' : ''}"><?= $this->translate('No one has been tagged in this photo yet. Tag someone you recognise now!')?></span>
                                <div class="tagList">
                                    ${data.map((member) => {
                                        let viewMemberUrl = URLHelper.url('member/view', {lidnr: member.lidnr});
                                        let removeUrl = URLHelper.url('photo/photo/tag/remove', {photo_id: id, lidnr: member.lidnr});
                                        let spacer = (i++ && i < tagCount) ? ',&nbsp' : ((i === tagCount) ? '<?= $this->translate('and') ?>' : '');

                                        return `
                                            <span>
                                                <a href="${viewMemberUrl}">${member.fullName}</a>&nbsp;
                                                <a class="remove-tag" href="${removeUrl}" data-tag-id="removeTag${member.id}">
                                                    <span class="fas fa-times" aria-hidden="true"></span>
                                                </a>
                                                <span class="tag-spacer">${spacer}</span>
                                            </span>`;
                                    }).join('')}
                                </div>
                                <?php if ($this->acl('photo_service_acl')->isAllowed('tag', 'add')): ?>
                                    <div class="form-group">
                                        <label for="tagSearch"><span class="fas fa-plus"></span> <?= $this->translate('Tag someone') ?>:</label>
                                        <input type="text"
                                            data-url="${URLHelper.url('photo/photo/tag/add', {photo_id: id, lidnr: 'lidnr'})}"
                                            id="tagSearch" class="tagSearch" name="tagSearch">
                                    </div>
                                <?php endif; ?>
                            `;

                            // Now that we have replicated the tags into actual elements, we can change the tags to
                            // true to show that we can continue processing (i.e. adding the auto complete).
                            pswp.currSlide.data.tags = true;
                        }

                        // At this point, we are guaranteed that the tags data element is a boolean. If it is false, we
                        // were unable to retrieve the tags, hence we do not need to load the auto complete
                        // functionality. If it is true (because we just loaded the tags) do in fact enable the auto
                        // complete functionality.
                        if (false !== pswp.currSlide.data.tags) {
                            let figTags = currentSlide.querySelector('figtags');

                            // If figtags is empty, we just loaded the data (or we recently deleted all existing tags),
                            // and we replicate the data from the PhotoSwipe UI to the actual DOM element. Otherwise,
                            // the data already existed, so we load it back.
                            if (figTags.hasChildNodes()) {
                                el.innerHTML = figTags.innerHTML;
                            } else {
                                figTags.innerHTML = el.innerHTML;
                            }

                            // Remove any old autocomplete suggestion boxes.
                            document.querySelectorAll('.autocomplete-suggestions').forEach(element => {
                                element.remove();
                            });

                            // Make it possible to add new tags.
                            let tagSearch = el.querySelector('.tagSearch');
                            new VanillaAutocomplete(tagSearch, {
                                minChars: 2,
                                lookup: function (query, done) {
                                    $.getJSON(URLHelper.url('member/search') + '?q=' + query, function (data) {
                                        var result = {suggestions: []};

                                        $.each(data.members, function (i, member) {
                                            result.suggestions.push({
                                                'value': member.fullName, 'data': member.lidnr
                                            })
                                        });

                                        done(result);
                                    });
                                },
                                orientation: 'top',
                                onSelect: function (suggestion) {
                                    $.post(tagSearch.dataset.url.replace('lidnr', suggestion.data),
                                        { lidnr: suggestion.data }
                                        , function (data) {
                                            if (data.success) {
                                                let removeURL = URLHelper.url('photo/photo/tag/remove', {
                                                    'photo_id': data.tag.photo_id,
                                                    'lidnr': data.tag.member_id
                                                });

                                                let memberURL = URLHelper.url('member/view', {
                                                    'lidnr': data.tag.member_id
                                                });

                                                // Start writing the tag into the current slide.
                                                let tagList = el.querySelector('.tagList');
                                                let spacer = (0 !== tagList.childElementCount) ?
                                                    ((1 === tagList.childElementCount) ?
                                                        ' <?= $this->translate('and') ?> '
                                                        : ',&nbsp')
                                                    : '';

                                                // Check if there were previously no tags to ensure we show the correct
                                                // text to the user.
                                                if (0 === tagList.childElementCount) {
                                                    el.querySelector('.no-tag-title').classList.add('hidden');
                                                    el.querySelector('.tag-title').classList.remove('hidden');
                                                }

                                                // Insert the new tag directly at the beginning of the tag list, this
                                                // prevents us from having to deal with the complicated logic of having
                                                // to deal with the commas and 'and' between the tags.
                                                tagList.insertAdjacentHTML(
                                                    'afterbegin',
                                                    `
                                                    <span>
                                                        <a href="${memberURL}">${suggestion.value}</a>
                                                        <a href="${removeURL}" class="remove-tag"
                                                            data-tag-id="removeTag${data.tag.id}">
                                                            <span class="fas fa-times" aria-hidden="true"></span>
                                                        </a>
                                                        <span class="tag-spacer">${spacer}</span>
                                                    </span>
                                                    `
                                                );

                                                // Because we want to "cache" the current slide's tags for future usage
                                                // and prevent having to make too many requests, we have to write the
                                                // current "state" of the tags back into the actual DOM element.
                                                figTags.innerHTML = el.innerHTML;

                                                Photo.initRemoveTag(el.querySelector('a[data-tag-id="removeTag' + data.tag.id + '"]'));
                                            }

                                            tagSearch.value = '';
                                            tagSearch.focus();
                                        });
                                },
                                zIndex: 100000,
                            });

                            // Make tags removable.
                            el.querySelectorAll('.remove-tag').forEach(element => {
                                Photo.initRemoveTag(element);
                            });
                        }
                    });

                    pswp.on('zoomPanUpdate', () => {
                        let tagsUIHideTimeout;

                        if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.initial) {
                            el.classList.add('pswp__tags-ui--hidden');

                            if (tagsUIHideTimeout) {
                                clearTimeout(tagsUIHideTimeout);
                            }

                            tagsUIHideTimeout = setTimeout(() => {
                                el.hidden = true
                                tagsUIHideTimeout = null;
                            }, 300);
                        } else {
                            el.hidden = false;

                            if (tagsUIHideTimeout) {
                                clearTimeout(tagsUIHideTimeout);
                            }

                            tagsUIHideTimeout = setTimeout(() => {
                                el.classList.remove('pswp__tags-ui--hidden');
                                tagsUIHideTimeout = null;
                            }, 50);
                        }
                    });
                },
            });
        <?php endif; ?>
    });

    // If the tag search is being used, do not allow zooming using the `z` or arrow keys.
    lightbox.on('keydown', (e)  => {
        let pressedKey = e.originalEvent.keyCode;
        let tagSearch = document.querySelector('.pswp__tags-ui .tagSearch');

        if (
            document.activeElement === tagSearch
            && (
                90 === pressedKey
                || ("" !== tagSearch.value && (37 === pressedKey || 39 === pressedKey))
            )
        ) {
            e.preventDefault();
        }
    });

    // To properly show the tooltips (not the native titles) we need to inject the event handlers, but only after the UI
    // has been created (which is guaranteed to be before `afterInit`).
    lightbox.on('afterInit', () => {
        $('.pswp__top-bar').tooltip({
            placement: 'bottom',
            selector: '[title]',
        });
    });

    // Fetch tags from the API.
    lightbox.on('gettingData', (event) => {
        // When opening the photo viewer, there is initially no slide.
        if ('slide' in event) {
            // Unfortunately, the tags data element is lost after the slide is unloaded, hence we need to check if we
            // managed to get data into the actual DOM to determine if we need to fetch the tags again. We also
            // assume that the same applies to votes.
            if (!event.slide.data.element.querySelector('figtags').hasChildNodes()) {
                event.slide.data = {
                    ...event.slide.data,
                    tags: fetch(event.slide.data.element.dataset.tagsUrl).then(response => response.json()),
                    voted: fetch(event.slide.data.element.dataset.votedUrl).then(response => response.json()),
                };
            }
        }
    });

    // Update the last active element when a new slide is shown.
    lightbox.on('change', () => {
        lastActiveElement = lightbox.pswp.currSlide.data.element;
    });

    lightbox.on('close', () => {
        // Remove all remaining autocomplete suggestion elements.
        document.querySelectorAll('.autocomplete-suggestions').forEach(element => {
            element.remove();
        });

        let elBoundingBox = lastActiveElement.getBoundingClientRect();

        // If the last active element is slightly outside the viewport, scroll it into view (preferably centered).
        if (
            elBoundingBox.top < 0
            || elBoundingBox.left < 0
            || elBoundingBox.bottom > (window.innerHeight || document.documentElement.clientHeight)
            || elBoundingBox.right > (window.innerWidth || document.documentElement.clientWidth)
        ) {
            lastActiveElement.scrollIntoView({block: 'center'});
        }

        lastActiveElement = null;
    });

    lightbox.init();

    // Check if the hash is present in the URL, if so, parse and try to open the lightbox for the provided image.
    const idMatcher = /^pid=(\d+)$/i;
    const pid = window.location.hash.substring(1).match(idMatcher);

    if (null !== pid) {
        document.querySelector(`.pswp-gallery__item[data-id="${parseInt(pid[1], 10)}"]`)?.click();
    }
</script>
